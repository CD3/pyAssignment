#! /usr/bin/env python2

# TODO
# extract paragraphs

import os,sys,textwrap,re
from argparse import ArgumentParser

parser = ArgumentParser(description="Generate pyAssignment scripts from pyHomework scripts.")

parser.add_argument("homework_script",
                    action="store",
                    help="Homework script" )

parser.add_argument("-o", "--output",
                    action="store",
                    default="/dev/stdout",
                    help="Output file",)


args = parser.parse_args()

if os.path.abspath( args.homework_script ) == os.path.abspath( args.output ):
  raise RuntimeError("Output file is same as input file. This will overwrite the input, which is probably not desired.")

with open(args.homework_script,'r') as f:
  input_lines = f.readlines()

def filt(line):
  if line.startswith("Build()"):
    return False
  return True

def trans(line):
  if line.startswith("Setup("):
    return line.replace('__file__',"'{}'".format(args.homework_script))
  return line

script_lines = [ trans(line) for line in filter( filt, input_lines ) ]
script_text = "".join(script_lines)

script_dir = os.path.abspath(os.path.dirname(args.homework_script))

currdir = os.getcwd()
os.chdir(script_dir)
sys.path.append( script_dir )
exec(script_text)
os.chdir(currdir)

def fmt_NS_var(v):
  try:
    mag = v.magnitude
    try:
      mag = [ e for e in mag ]
    except:
      pass
      
    uni = v.units
    return "Q_({},'{}')".format(mag,uni)
  except:
    pass
  return "'''{}'''".format(v)

def fmt_NS_assignment_line(k,v):
  return "q.NS.{k} = {v}\n".format(k=k,v=fmt_NS_var(v))

def fmt_Answer(a,parent,this):
  try: # numerical answer with uncertainty
    value = a._quant.nominal.magnitude
    units = a._quant.nominal.units

    text = """\
with {PARENT}.add_answer(Answer.Numerical) as {THIS}:
  {THIS}.quantity = Q_({VALUE},"{UNITS}")
""".format(PARENT=parent,THIS=this,VALUE=value,UNITS=units)

    return text
  except: pass

  try: # numerical answer without uncertainty
    value = a._quant.magnitude
    units = a._quant.units

    text = """\
with {PARENT}.add_answer(Answer.Numerical) as {THIS}:
  {THIS}.quantity = Q_({VALUE},"{UNITS}")
""".format(PARENT=parent,THIS=this,VALUE=value,UNITS=units)

    return text
  except: pass

  try: # multiple choice
    text =  """with {PARENT}.add_answer(Answer.MultipleChoice) as {THIS}:\n""".format(PARENT=parent,THIS=this)
    for correct,choice in a.choices:
      if choice.lower() == "none of the above.":
        continue

      if correct:
        text += """  {THIS}.correct += r'''{TEXT}'''\n""".format(THIS=this,TEXT=choice)
      else:
        text += """  {THIS}.incorrect += r'''{TEXT}'''\n""".format(THIS=this,TEXT=choice)
    return text
  except: pass

  raise RuntimeError("Could not write answer: {TYPE}.".format(TYPE=type(a)))


def fmt_Question(q,parent,this):
  text = """\
with {PARENT}.add_question() as {THIS}:
  {THIS}.text = r'''{TEXT}'''
  {THIS}.meta.label = r'''{LABEL}'''
""".format(TEXT=q.question_str,LABEL=id(q),PARENT=parent,THIS=this)
  return text

def fmt_Part(p,parent=None,this=None):
  text = """\
with {PARENT}.add_part() as {THIS}:
  {THIS}.text = r'''{TEXT}'''
  {THIS}.meta.label = r'''{LABEL}'''
""".format(TEXT=p.question_str,LABEL=id(p),PARENT=parent,THIS=this)
  return text

def fmt_Figure(f):
  text = """\
with ass.add_figure() as f:
  f.caption = r'''{CAPTION}'''
  f.filename = r'''{FILENAME}'''
  f.meta.label = r'''{LABEL}'''
""".format(CAPTION=' '.join(f._caption),FILENAME=f.filename,LABEL=''.join(f._label))
  return text

def fmt_GradeTest(n,cs):
  text = """\
with g.add_test() as t:
  t.name = r'''{NAME}'''
  t.command = r'''{CMD}'''
""".format(NAME=n,CMD=';'.join(cs))
  return text

def indent(text,level=1,chars="  "):
  if level == 0:
    return text

  if level == 1:
    lines = list()
    for line in text.split("\n"):
      if len( line.strip() ) > 0:
        lines.append(chars + line)
      else:
        lines.append(line)

    return "\n".join( lines )

  if level > 1:
    return indent(indent(text,level-1))





with open(args.output,'w') as f:
  # SETUP
  f.write("import os,sys, subprocess\n")
  f.write("from pyAssignment.Assignment import Assignment\n")
  f.write("import pyAssignment.Assignment.Answers as Answer\n")
  f.write("from pyAssignment.Writers import Simple,Latex\n")
  f.write("from pyAssignment.Actions import BuildProblemSetAndBlackboardQuiz\n")
  f.write("from pyAssignment.Graders.CLGrader import CLGrader\n")

  f.write('''\
import numpy
import pyErrorProp as err
from utils import Constants
from utils import Units
from utils import Spelling

uconv = err.UncertaintyConvention()
units = uconv._UNITREGISTRY
Q_ = units.Quantity
UQ_ = uconv.UncertainQuantity
c = Constants.ConstantsCollection(units,3)
''')

  # create Assignment
  f.write("ass = Assignment()\n")

  # write config data. title, header, ,etc
  try: f.write("ass.meta.title = r'{}'\n".format(ass._config['title']))
  except: pass

  f.write("ass.meta.header = dict()\n")
  for fh in ["L", "C", "R"]:
    try: f.write("ass.meta.header['{}'] = r'{}'\n".format(fh,ass._config[fh+"H"]))
    except: pass

  f.write("ass.meta.footer = dict()\n")
  for ff in ["L", "C", "R"]:
    try: f.write("ass.meta.footer['{}'] = r'{}'\n".format(ff,ass._config[ff+"F"]))
    except: pass

  # some stuff we will want in the LaTeX premble
  f.write(r'''
units.define('electronvolt = 1.60217653e-19 * J = eV')
ass.meta.latex_preamble_lines = [r'\DeclareSIUnit \degF {\degree F}'
                                ,r'\DeclareSIUnit \degC {\degree C}'
                                ,r'\DeclareSIUnit \degK {K}'
                                ,r'\DeclareSIUnit \mile {mi}'
                                ,r'\DeclareSIUnit \inch {in}'
                                ,r'\DeclareSIUnit \foot {ft}'
                                ,r'\DeclareSIUnit \yard {yd}'
                                ,r'\DeclareSIUnit \acre {acre}'
                                ,r'\DeclareSIUnit \lightyear {ly}'
                                ,r'\DeclareSIUnit \year {yr}'
                                ,r'\DeclareSIUnit \parcec {pc}'
                                ,r'\DeclareSIUnit \teaspoon {tsp.}'
                                ,r'\DeclareSIUnit \tablespoon {tbsp.}'
                                ,r'\DeclareSIUnit \gallon {gal}'
                                ,r'\DeclareSIUnit \quart {qt}'
                                ,r'\DeclareSIUnit \pallet {pallet}'
                                ,r'\DeclareSIUnit \dollar {{\$}}'
                                ,r'\DeclareSIUnit \poundmass {lbm}'
                                ,r'\DeclareSIUnit \poundforce {lbf}'
                                ,r'\DeclareSIUnit \gravity {g}'
                                ,r'\DeclareSIUnit \revolutionsperminute{rpm}'
                                ,r'\DeclareSIUnit \mph{mph}'
                                ,r'\DeclareSIUnit \fluidounce{floz}'
                                ,r'\DeclareSIUnit \turn {rev}'
                                ,r'\sisetup{per-mode=fraction}'
                                ]
''')

  # loop through questions
  for q in ass._questions:
    f.write("\n")
    f.write("\n")
    f.write( fmt_Question(q,'ass','q') )

    # write variables to questions namespace
    for k in q.v.__dict__:
      f.write( indent(fmt_NS_assignment_line(k,q.v.__dict__[k])))

    # write answer
    if len(q._answers) > 0:
      f.write(indent(fmt_Answer(q._answers[0],'q','a')))

    # look for quiz questions that reference this question
    for j in range(len(quiz._questions)):
      qq = quiz._questions[j]
      if qq is not None and quiz._questions[j].question_str.find(str(id(q))) > -1:
        text = fmt_Question(qq,'q','qq')
        text = re.sub("For problem #<<refs\[\d+\]>>: ","",text)
        f.write( indent(text) )
        # write answer
        if len(quiz._questions[j]._answers) > 0:
          f.write(indent(fmt_Answer(quiz._questions[j]._answers[0],'qq','a'),2))
        quiz._questions[j] = None

    # loop through question's parts
    for p in q._parts:
      f.write("\n")
      f.write( indent(fmt_Part(p,'q','p')))

      # write answers
      if len(q._answers) > 0:
        f.write(indent(fmt_Answer(q._answers[0],'p','a'),2))

      # look for quiz questions that reference this question
      for j in range(len(quiz._questions)):
        qq = quiz._questions[j]
        if qq is not None and quiz._questions[j].question_str.find(str(id(p))) > -1:
          text = fmt_Question(qq,'p','qq')
          text = re.sub("For problem #<<refs\[\d+\]>>: ","",text)
          f.write( indent(text,2) )
          # write answers
          if len(quiz._questions[j]._answers) > 0:
            f.write(indent(fmt_Answer(quiz._questions[j]._answers[0],'qq','a'),3))
          quiz._questions[j] = None

  # loop through assignment's figures
  for k in ass._figures:
    fig = ass._figures[k]
    f.write( fmt_Figure(fig) )

  # write any quiz questions that were not found
  # so no information is lost
  f.write("#############################\n")
  f.write("### UNUSED QUIZ QUESTIONS ###\n")
  f.write("#############################\n")
  for qq in quiz._questions:
    if qq is not None:
      print("WARNING: an unused question was found in the quiz.")
      f.write( indent(fmt_Question(qq),1,"#") )
  f.write("#############################\n")

  try:
    len(g._items)
    f.write("g = CLGrader()\n")
    for k in g._items:
      f.write( fmt_GradeTest(k,g._items[k]) )
  except: pass

  f.write("""\

basename = os.path.basename(__file__).replace(".py","")
BuildProblemSetAndBlackboardQuiz(ass,basename,remove=False)
""")
  try:
    f.write("try:g.write_grader_script(basename+'-grader.py')\nexcept:pass")
    len(g._items)
  except: pass




